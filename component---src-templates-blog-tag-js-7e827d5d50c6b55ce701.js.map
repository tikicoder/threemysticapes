{"version":3,"sources":["webpack:///./src/components/layout/layout.js","webpack:///./src/templates/blog/tag.js"],"names":["library","add","fab","useStyles","makeStyles","layoutPageStyle","useStylesPage","globalPageStyle","Layout","children","pageNode","location","pageContext","props","classes","classesPage","themeVariation","window","localStorage","getItem","setItem","justify","xs","sm","md","TemplatePage","data","node","posts","context","dynamicTitle","length","title","query"],"mappings":"4SA6BAA,UAAQC,IAAIC,KAEZ,IAAMC,EAAYC,YAAWC,KACvBC,EAAgBF,YAAWG,KAgBlB,SAASC,EAAT,GAA0E,IAAxDC,EAAuD,EAAvDA,SAAUC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,YAAgBC,EAAS,gEAEhFC,EAAUX,IACVY,EAAcT,IAEdU,EAAoC,oBAAXC,QAA2BC,aAAaC,QAAQ,kBAAoBD,aAAaC,QAAQ,kBAA8B,OAMtJ,MALsB,oBAAXF,QACTC,aAAaE,QAAQ,iBAAkBJ,GAKvC,YAAC,IAAD,aAAYN,SAAUA,EAAUI,QAASA,EAASC,YAAaA,EAAaJ,SAAUA,EAAUC,YAAaA,GAAiBC,GAC5H,YAAC,IAAD,CAAeQ,QAAQ,UACrB,YAAC,IAAD,CAAUC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC5B,YAAC,IAAD,CAAiBd,SAAUA,EAAUI,QAASA,EAASC,YAAaA,EAAaJ,SAAUA,EAAUC,YAAaA,GAC/GH,Q,mMC/CE,SAASgB,EAAT,GAKX,IAJFC,EAIC,EAJDA,KACAd,EAGC,EAHDA,YACAD,EAEC,EAFDA,SACGE,EACF,iDACOc,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MAqBd,OApBAhB,EAAYiB,QACc,OAAxBjB,EAAYiB,cAA2C,IAAhBjB,EACnC,GACAA,EAAYiB,QAGa,OAA7BjB,EAAYkB,mBACwB,IAA7BlB,EAAYkB,cAEflB,EAAYkB,aAAaC,OAAS,IAEX,OAAvBJ,EAAKE,QAAQG,YACiB,IAAvBL,EAAKE,QAAQG,QAEpBL,EAAKE,QAAQG,MAAQ,IAEvBL,EAAKE,QAAQG,OAAS,MAAQpB,EAAYkB,cAK5C,YAAC,IAAD,aACEpB,SAAUiB,EACVhB,SAAUA,EACVC,YAAaA,GACTC,GAEJ,YAAC,IAAD,CACEH,SAAUiB,EACVC,MAAOA,EACPhB,YAAaA,EACbD,SAAUA,KAMX,IAAMsB,EAAK","file":"component---src-templates-blog-tag-js-7e827d5d50c6b55ce701.js","sourcesContent":["//copy contents from assets/jss/common/material-kit-react.js\n//Dark theme reference\n//https://www.bootstrapdash.com/demo/material-admin-dark/jquery/template/demo_1/index.html\n//material components\n//https://material-components.github.io/\n\n\nimport React from \"react\"\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\n\n// @material-ui/icons\n\nimport \"fontsource-roboto\"\n//@FontAwsome\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\n// import { faCheckSquare, faCoffee } from '@fortawesome/free-solid-svg-icons'\n\n// core components\nimport GridContainer from \"@components/Grid/GridContainer.js\";\nimport GridItem from \"@components/Grid/GridItem.js\";\nimport LayoutMain from \"@components/layout/layoutMain.js\";\nimport PageMaincontent from \"@components/layout/section/common/page/mainContent.js\";\n\n\nimport { layoutPageStyle } from \"assets/jss/views/layout/layout.js\";\nimport { globalPageStyle } from \"assets/jss/common/globalPage.js\"\n\nlibrary.add(fab);\n\nconst useStyles = makeStyles(layoutPageStyle);\nconst useStylesPage = makeStyles(globalPageStyle);\n\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  pageNode: PropTypes.object.isRequired,\n  props: PropTypes.object,\n}\n\n//GTag Code\n// (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n// new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n// j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n// 'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n// })(window,document,'script','dataLayer','GTM-WF2NJHR');\n\nexport default function Layout({ children, pageNode, location, pageContext, ...props }) {\n\n  const classes = useStyles();\n  const classesPage = useStylesPage();\n\n  const themeVariation = (typeof window !== 'undefined') ? (localStorage.getItem('themeVariation') ? localStorage.getItem('themeVariation') : \"dark\") : \"dark\";  \n  if (typeof window !== 'undefined'){\n    localStorage.setItem(\"themeVariation\", themeVariation);\n  }\n\n\n  return (\n    <LayoutMain pageNode={pageNode} classes={classes} classesPage={classesPage} location={location} pageContext={pageContext} {...props}>\n      <GridContainer justify=\"center\">\n        <GridItem xs={12} sm={12} md={12}>\n          <PageMaincontent pageNode={pageNode} classes={classes} classesPage={classesPage} location={location} pageContext={pageContext}>\n            {children}\n          </PageMaincontent>\n        </GridItem>\n      </GridContainer>\n    </LayoutMain>\n  )\n}","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"@components/layout/layout\"\nimport MDXRenderer from \"@components/layout/section/common/page/mdxRender\"\n\n/*\nchildren: \nlocation: {hash:, host:, hostname:, href, key, orgin, pathname, port, protocol, search, state:{key:}}\nnavigate: ƒ navigate(to, options)\npageContext: {slug: }\npageResources: {json: {…}, page: {…}, staticQueryResults: {…}, component: ƒ}\nparams: {}\npath: \"/about\"\npageContext: {slug: \"/about\"} //Based off gatsby-node create page\nuri: \"/about\"\n*/\nexport default function TemplatePage({\n  data,\n  pageContext,\n  location,\n  ...props\n}) {\n  const { node, posts } = data\n  pageContext.context =\n    pageContext.context === null || typeof pageContext === \"undefined\"\n      ? \"\"\n      : pageContext.context\n\n  if (\n    pageContext.dynamicTitle !== null &&\n    typeof pageContext.dynamicTitle !== \"undefined\"\n  ) {\n    if (pageContext.dynamicTitle.length > 0) {\n      if (\n        node.context.title === null ||\n        typeof node.context.title === \"undefined\"\n      ) {\n        node.context.title = \"\"\n      }\n      node.context.title += \" - \" + pageContext.dynamicTitle\n    }\n  }\n\n  return (\n    <Layout\n      pageNode={node}\n      location={location}\n      pageContext={pageContext}\n      {...props}\n    >\n      <MDXRenderer\n        pageNode={node}\n        posts={posts}\n        pageContext={pageContext}\n        location={location}\n      />\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query($pageID: String!, $data: String) {\n    node: threeMysticApesPage(id: { eq: $pageID }) {\n      slug\n      context: page {\n        slug\n        ariaLabel\n        button\n        description\n        keywords\n        meta {\n          content\n          name\n          property\n        }\n        pageStyle {\n          name\n          style\n        }\n        title\n      }\n    }\n    posts: allThreeMysticApesPost(\n      filter: { showNode: { eq: true }, post: { tags: { in: [$data] } } }\n      sort: { fields: post___startDate, order: DESC }\n    ) {\n      edges {\n        node {\n          post {\n            title\n            excerpt\n            mysticApes {\n              name\n            }\n            seriesData {\n              series {\n                name\n                display\n              }\n              part\n            }\n            startDate\n            hero {\n              publicURL\n            }\n            gridSmall {\n              publicURL\n            }\n            gridLarge {\n              publicURL\n            }\n          }\n          slug\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}