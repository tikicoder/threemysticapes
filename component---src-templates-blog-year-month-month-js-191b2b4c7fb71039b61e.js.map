{"version":3,"sources":["webpack:///./src/templates/blog/yearMonth/month.js","webpack:///./src/components/layout/layout.js"],"names":["TemplatePage","data","pageContext","location","props","node","blogPosts","dynamicTitle","length","context","title","pageNode","posts","query","library","add","fab","useStyles","makeStyles","layoutPageStyle","useStylesPage","globalPageStyle","Layout","children","classes","classesPage","themeVariation","window","localStorage","getItem","setItem","justify","xs","sm","md"],"mappings":"+PAiBe,SAASA,EAAT,GAKX,IAJFC,EAIC,EAJDA,KACAC,EAGC,EAHDA,YACAC,EAEC,EAFDA,SACGC,EACF,iDACOC,EAAoBJ,EAApBI,KAAMC,EAAcL,EAAdK,UAiBd,OAd+B,OAA7BJ,EAAYK,mBACwB,IAA7BL,EAAYK,cAEfL,EAAYK,aAAaC,OAAS,IAEX,OAAvBH,EAAKI,QAAQC,YACiB,IAAvBL,EAAKI,QAAQC,QAEpBL,EAAKI,QAAQC,MAAQ,IAEvBL,EAAKI,QAAQC,OAAS,MAAQR,EAAYK,cAK5C,YAAC,IAAD,aACEI,SAAUN,EACVF,SAAUA,EACVD,YAAaA,GACTE,GAEJ,YAAC,IAAD,CACEO,SAAUN,EACVO,MAAON,EACPJ,YAAaA,EACbC,SAAUA,KAMX,IAAMU,EAAK,a,kPC5BlBC,UAAQC,IAAIC,KAEZ,IAAMC,EAAYC,YAAWC,KACvBC,EAAgBF,YAAWG,KAgBlB,SAASC,EAAT,GAA0E,IAAxDC,EAAuD,EAAvDA,SAAUZ,EAA6C,EAA7CA,SAAUR,EAAmC,EAAnCA,SAAUD,EAAyB,EAAzBA,YAAgBE,EAAS,gEAEhFoB,EAAUP,IACVQ,EAAcL,IAEdM,EAAoC,oBAAXC,QAA2BC,aAAaC,QAAQ,kBAAoBD,aAAaC,QAAQ,kBAA8B,OAMtJ,MALsB,oBAAXF,QACTC,aAAaE,QAAQ,iBAAkBJ,GAKvC,YAAC,IAAD,aAAYf,SAAUA,EAAUa,QAASA,EAASC,YAAaA,EAAatB,SAAUA,EAAUD,YAAaA,GAAiBE,GAC5H,YAAC,IAAD,CAAe2B,QAAQ,UACrB,YAAC,IAAD,CAAUC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC5B,YAAC,IAAD,CAAiBvB,SAAUA,EAAUa,QAASA,EAASC,YAAaA,EAAatB,SAAUA,EAAUD,YAAaA,GAC/GqB","file":"component---src-templates-blog-year-month-month-js-191b2b4c7fb71039b61e.js","sourcesContent":["import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\n\r\nimport Layout from \"@components/layout/layout\"\r\nimport MDXRenderer from \"@components/layout/section/common/page/mdxRender\"\r\n\r\n/*\r\nchildren: \r\nlocation: {hash:, host:, hostname:, href, key, orgin, pathname, port, protocol, search, state:{key:}}\r\nnavigate: ƒ navigate(to, options)\r\npageContext: {slug: }\r\npageResources: {json: {…}, page: {…}, staticQueryResults: {…}, component: ƒ}\r\nparams: {}\r\npath: \"/about\"\r\npageContext: {slug: \"/about\"} //Based off gatsby-node create page\r\nuri: \"/about\"\r\n*/\r\nexport default function TemplatePage({\r\n  data,\r\n  pageContext,\r\n  location,\r\n  ...props\r\n}) {\r\n  const { node, blogPosts } = data\r\n\r\n  if (\r\n    pageContext.dynamicTitle !== null &&\r\n    typeof pageContext.dynamicTitle !== \"undefined\"\r\n  ) {\r\n    if (pageContext.dynamicTitle.length > 0) {\r\n      if (\r\n        node.context.title === null ||\r\n        typeof node.context.title === \"undefined\"\r\n      ) {\r\n        node.context.title = \"\"\r\n      }\r\n      node.context.title += \" - \" + pageContext.dynamicTitle\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout\r\n      pageNode={node}\r\n      location={location}\r\n      pageContext={pageContext}\r\n      {...props}\r\n    >\r\n      <MDXRenderer\r\n        pageNode={node}\r\n        posts={blogPosts}\r\n        pageContext={pageContext}\r\n        location={location}\r\n      />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query($pageID: String!, $postYear: Int!, $postMonth: Int!) {\r\n    node: threeMysticApesPage(id: { eq: $pageID }) {\r\n      slug\r\n      context: page {\r\n        slug\r\n        ariaLabel\r\n        button\r\n        description\r\n        keywords\r\n        meta {\r\n          content\r\n          name\r\n          property\r\n        }\r\n        pageStyle {\r\n          name\r\n          style\r\n        }\r\n        title\r\n      }\r\n    }\r\n    blogPosts: allThreeMysticApesPost(\r\n      filter: { showNode: { eq: true },\r\n        postYear: {eq: $postYear},\r\n      postMonth: {eq: $postMonth} }\r\n      sort: { fields: post___startDate, order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          post {\r\n            title\r\n            excerpt\r\n            mysticApes {\r\n              name\r\n            }\r\n            seriesData {\r\n              series {\r\n                name\r\n              }\r\n              part\r\n            }\r\n            startDate\r\n            hero {\r\n              publicURL\r\n            }\r\n            gridSmall {\r\n              publicURL\r\n            }\r\n            gridLarge {\r\n              publicURL\r\n            }\r\n          }\r\n          slug\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","//copy contents from assets/jss/common/material-kit-react.js\r\n//Dark theme reference\r\n//https://www.bootstrapdash.com/demo/material-admin-dark/jquery/template/demo_1/index.html\r\n//material components\r\n//https://material-components.github.io/\r\n\r\n\r\nimport React from \"react\"\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// @material-ui/icons\r\n\r\nimport \"fontsource-roboto\"\r\n//@FontAwsome\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { fab } from '@fortawesome/free-brands-svg-icons'\r\n// import { faCheckSquare, faCoffee } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// core components\r\nimport GridContainer from \"@components/Grid/GridContainer.js\";\r\nimport GridItem from \"@components/Grid/GridItem.js\";\r\nimport LayoutMain from \"@components/layout/layoutMain.js\";\r\nimport PageMaincontent from \"@components/layout/section/common/page/mainContent.js\";\r\n\r\n\r\nimport { layoutPageStyle } from \"assets/jss/views/layout/layout.js\";\r\nimport { globalPageStyle } from \"assets/jss/common/globalPage.js\"\r\n\r\nlibrary.add(fab);\r\n\r\nconst useStyles = makeStyles(layoutPageStyle);\r\nconst useStylesPage = makeStyles(globalPageStyle);\r\n\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  pageNode: PropTypes.object.isRequired,\r\n  props: PropTypes.object,\r\n}\r\n\r\n//GTag Code\r\n// (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\r\n// new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\r\n// j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\r\n// 'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\r\n// })(window,document,'script','dataLayer','GTM-WF2NJHR');\r\n\r\nexport default function Layout({ children, pageNode, location, pageContext, ...props }) {\r\n\r\n  const classes = useStyles();\r\n  const classesPage = useStylesPage();\r\n\r\n  const themeVariation = (typeof window !== 'undefined') ? (localStorage.getItem('themeVariation') ? localStorage.getItem('themeVariation') : \"dark\") : \"dark\";  \r\n  if (typeof window !== 'undefined'){\r\n    localStorage.setItem(\"themeVariation\", themeVariation);\r\n  }\r\n\r\n\r\n  return (\r\n    <LayoutMain pageNode={pageNode} classes={classes} classesPage={classesPage} location={location} pageContext={pageContext} {...props}>\r\n      <GridContainer justify=\"center\">\r\n        <GridItem xs={12} sm={12} md={12}>\r\n          <PageMaincontent pageNode={pageNode} classes={classes} classesPage={classesPage} location={location} pageContext={pageContext}>\r\n            {children}\r\n          </PageMaincontent>\r\n        </GridItem>\r\n      </GridContainer>\r\n    </LayoutMain>\r\n  )\r\n}"],"sourceRoot":""}