{"version":3,"sources":["webpack:///./src/components/layout/layout.js","webpack:///./src/templates/blog/blog.js"],"names":["library","add","fab","useLayoutStyles","makeStyles","layoutPageStyle","usePageStyles","globalPageStyle","Layout","children","pageNode","location","pageContext","props","classes","classesPage","themeVariation","ThreeMysticApesThemeHelper","GetThemeVariation","window","localStorage","setItem","justify","xs","sm","md","TemplatePage","data","node","blogPosts","dynamicTitle","length","context","title","posts","query"],"mappings":"oYA8BAA,UAAQC,IAAIC,KAEL,IAAMC,EAAkBC,YAAWC,KAC7BC,EAAgBF,YAAWG,KAejC,SAASC,EAAT,GAA0E,IAAxDC,EAAuD,EAAvDA,SAAUC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,YAAgBC,EAAS,gEAExEC,EAAUX,IACVY,EAAcT,IAEdU,EAAiBC,IAA2BC,oBAMlD,MALsB,oBAAXC,QACTC,aAAaC,QAAQ,iBAAkBL,GAKvC,YAAC,IAAD,aAAYN,SAAUA,EAAUI,QAASA,EAASC,YAAaA,EAAaJ,SAAUA,EAAUC,YAAaA,GAAiBC,GAC5H,YAAC,IAAD,CAAeS,QAAQ,UACrB,YAAC,IAAD,CAAUC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC5B,YAAC,IAAD,CAAiBf,SAAUA,EAAUI,QAASA,EAASC,YAAaA,EAAaJ,SAAUA,EAAUC,YAAaA,GAC/GH,Q,mMC1CE,SAASiB,EAAT,GAAiE,IAAzCC,EAAwC,EAAxCA,KAAMf,EAAkC,EAAlCA,YAAaD,EAAqB,EAArBA,SAAaE,EAAQ,iDACrEe,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,UAERf,EAAUX,cACVY,EAAcT,cAWpB,OATiC,OAA7BM,EAAYkB,mBAA6D,IAA7BlB,EAAYkB,cACtDlB,EAAYkB,aAAaC,OAAS,IACT,OAAvBH,EAAKI,QAAQC,YAA+C,IAAtBL,EAAKI,QAAQC,QACrDL,EAAKI,QAAQC,MAAQ,IAEvBL,EAAKI,QAAQC,OAAU,MAAQrB,EAAYkB,cAK7C,YAAC,IAAD,aACEpB,SAAUkB,EACVjB,SAAUA,EACVC,YAAaA,GACTC,GAEJ,YAAC,IAAD,CACEH,SAAUkB,EACVM,MAAOL,EACPjB,YAAaA,EACbD,SAAUA,EACVG,QAASA,EACTC,YAAaA,KAMd,IAAMoB,EAAK","file":"component---src-templates-blog-blog-js-a3b809768853bacdfaa0.js","sourcesContent":["//copy contents from assets/jss/common/material-kit-react.js\n//Dark theme reference\n//https://www.bootstrapdash.com/demo/material-admin-dark/jquery/template/demo_1/index.html\n//material components\n//https://material-components.github.io/\n\n\nimport React from \"react\"\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\n\n// @material-ui/icons\n\nimport \"fontsource-roboto\"\n//@FontAwsome\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\n\n// core components\nimport GridContainer from \"@components/Grid/GridContainer.js\";\nimport GridItem from \"@components/Grid/GridItem.js\";\nimport LayoutMain from \"@components/layout/layoutMain.js\";\nimport PageMaincontent from \"@components/layout/section/common/page/mainContent.js\";\n\n\nimport { layoutPageStyle } from \"assets/jss/views/layout/layout.js\";\nimport { globalPageStyle } from \"assets/jss/common/globalPage.js\"\n\nimport ThreeMysticApesThemeHelper from \"three_mystic_apes_extension/util/themeHelper.js\";\n\nlibrary.add(fab);\n\nexport const useLayoutStyles = makeStyles(layoutPageStyle)\nexport const usePageStyles = makeStyles(globalPageStyle)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  pageNode: PropTypes.object.isRequired,\n  props: PropTypes.object,\n}\n\n//GTag Code\n// (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n// new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n// j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n// 'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n// })(window,document,'script','dataLayer','GTM-WF2NJHR');\n\nexport function Layout({ children, pageNode, location, pageContext, ...props }) {\n\n  const classes = useLayoutStyles()\n  const classesPage = usePageStyles()\n\n  const themeVariation = ThreeMysticApesThemeHelper.GetThemeVariation();\n  if (typeof window !== 'undefined'){\n    localStorage.setItem(\"themeVariation\", themeVariation);\n  }\n\n\n  return (\n    <LayoutMain pageNode={pageNode} classes={classes} classesPage={classesPage} location={location} pageContext={pageContext} {...props}>\n      <GridContainer justify=\"center\">\n        <GridItem xs={12} sm={12} md={12}>\n          <PageMaincontent pageNode={pageNode} classes={classes} classesPage={classesPage} location={location} pageContext={pageContext}>\n            {children}\n          </PageMaincontent>\n        </GridItem>\n      </GridContainer>\n    </LayoutMain>\n  )\n}","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport {\n  Layout,\n  useLayoutStyles,\n  usePageStyles,\n} from \"@components/layout/layout\"\nimport MDXRenderer from \"@components/layout/section/common/page/mdxRender\"\n\n\n/*\nchildren: \nlocation: {hash:, host:, hostname:, href, key, orgin, pathname, port, protocol, search, state:{key:}}\nnavigate: ƒ navigate(to, options)\npageContext: {slug: }\npageResources: {json: {…}, page: {…}, staticQueryResults: {…}, component: ƒ}\nparams: {}\npath: \"/about\"\npageContext: {slug: \"/about\"} //Based off gatsby-node create page\nuri: \"/about\"\n*/\nexport default function TemplatePage({ data, pageContext, location, ...props}) {\n  const { node, blogPosts } = data\n\n  const classes = useLayoutStyles()\n  const classesPage = usePageStyles()\n\n  if (pageContext.dynamicTitle !== null && typeof pageContext.dynamicTitle !== 'undefined'){\n    if (pageContext.dynamicTitle.length > 0){\n      if (node.context.title === null || typeof node.context.title ==='undefined'){\n        node.context.title = \"\";\n      }\n      node.context.title += (\" - \" + pageContext.dynamicTitle)\n    }\n  }\n\n  return (\n    <Layout\n      pageNode={node}\n      location={location}\n      pageContext={pageContext}\n      {...props}\n    >\n      <MDXRenderer\n        pageNode={node}\n        posts={blogPosts}\n        pageContext={pageContext}\n        location={location}\n        classes={classes}\n        classesPage={classesPage}\n      />\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query($pageID: String!) {\n    node: threeMysticApesPage(id: { eq: $pageID }) {\n      slug\n      context: page {\n        slug\n        ariaLabel\n        button\n        description\n        keywords\n        meta {\n          content\n          name\n          property\n        }\n        pageStyle {\n          name\n          style\n        }\n        title\n      }\n    }\n    blogPosts: allThreeMysticApesPost(\n      filter: { showNode: { eq: true } }\n      sort: { fields: post___startDate, order: DESC }\n    ) {\n      edges {\n        node {\n          post {\n            title\n            excerpt\n            mysticApes {\n              name\n            }\n            seriesData {\n              series {\n                name\n                display\n              }\n              part\n            }\n            startDate\n            hero {\n              publicURL\n            }\n            gridSmall {\n              publicURL\n            }\n            gridLarge {\n              publicURL\n            }\n          }\n          slug\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}